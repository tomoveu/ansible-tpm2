#!/usr/bin/python3
# Copyright (c) 2020 by Erik Larsson 
# SPDX-License-Identifier: GPL-3.0-or-later


from contextlib import ExitStack
from ansible.module_utils.basic import AnsibleModule
from ansible.module_utils.tpm2.ek import ek_session
from ansible_collections.whooo.tpm2.plugins.module_utils.marshal import (
    b64unmarshal,
    b64marshal,
)
from ansible.module_utils.tpm2 import esysctx
from tpm2_pytss.esys import ESYSBinding
from tpm2_pytss.binding import (
    TPM2B_PUBLIC,
    TPM2B_PRIVATE,
    TPM2B_ID_OBJECT,
    TPM2B_ENCRYPTED_SECRET,
    TPMS_CONTEXT,
    ESYS_TR_NONE,
    ESYS_TR_PASSWORD,
    TPM2B_DIGEST_PTR_PTR,
)


def buffer_to_bytes(src):
    ba = bytearray()
    buf = ESYSBinding.ByteArray.frompointer(src.buffer)
    for i in range(0, src.size):
        ba.append(buf[i])
    return bytes(ba)

class tpm2_activatecred(object):
    def load_context(self, ctx):
        obj = self.ectx.ESYS_TR_PTR()
        self.ectx.ContextLoad(
            ctx,
            obj,
        )
        return obj.value()

    def load_key(self, public, private):
        ek_auth = ek_session(self.ectx)
        obj = self.ectx.ESYS_TR_PTR()
        with ExitStack() as stack:
            self.ectx.Load(
                self.phandle,
                ek_auth,
                ESYS_TR_NONE,
                ESYS_TR_NONE,
                private,
                public,
                obj
            )
            return obj.value()

    def __init__(self):
        self.module = AnsibleModule(
            argument_spec=dict(
                public=dict(type='str', required=True),
                private=dict(type='str', required=True),
                credblob=dict(type='str', required=True),
                secret=dict(type='str', required=True),
                parent_context=dict(type='str'),
		parent_template=dict(type='str'),
            )
        )

        self.tctiname = self.module.params.get('tctiname', 'device')
        self.tcticonf = self.module.params.get('tcticonf', '')
        stack = ExitStack()
        self.ectx = esysctx(stack, self.tctiname, self.tcticonf)
        if self.module.params['parent_context']:
            ctx = TPMS_CONTEXT()
            b64unmarshal(self.module.params['parent_context'], ctx)
            self.phandle = self.load_context(ctx)
        elif self.module.params['parent_template']:
            # b64unmarshal TPM2B_PUBLIC
            # CreatePrimary
            # set self.phandle
            pass
        else:
            self.module.fail_json(msg='one of parent_context or parent_template is required')

        public = TPM2B_PUBLIC()    
        b64unmarshal(self.module.params['public'], public)
        private = TPM2B_PRIVATE()
        b64unmarshal(self.module.params['private'], private)
        credblob = TPM2B_ID_OBJECT()
        b64unmarshal(self.module.params['credblob'], credblob)
        secret = TPM2B_ENCRYPTED_SECRET()
        b64unmarshal(self.module.params['secret'], secret)

        akobj = self.load_key(public, private)
        ek_auth = ek_session(self.ectx)
        with ExitStack() as stack:
            certinfo = stack.enter_context(TPM2B_DIGEST_PTR_PTR())
            self.ectx.ActivateCredential(
                akobj,
                self.phandle,
                ESYS_TR_PASSWORD,
                ek_auth,
                ESYS_TR_NONE,
                credblob,
                secret,
                certinfo,
            )
            self.cv = buffer_to_bytes(certinfo.value)
            
    def run_module(self):
        self.module.exit_json(cv=self.cv)

if __name__ == '__main__':
    ac = tpm2_activatecred()
    ac.run_module()
